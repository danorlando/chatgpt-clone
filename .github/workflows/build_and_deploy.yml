# The name of the workflow.
name: Build and Deploy

# Run the workflow when code is pushed to the main branch
on:
  push:
    branches:
      - build/automated-deploy

# Set environment variables
# env:
#   MONGODB_URI: ${{ secrets.MONGODB_URI }}
#   TOKEN_KEY: ${{ secrets.TOKEN_KEY }}
#   EMAIL: ${{ secrets.EMAIL }}
#   PASSWORD: ${{ secrets.PASSWORD }}

# This is the workflow that is being run.
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      # Checkout the code from the GitHub repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Build a Docker image for the application
      # - name: Build Docker Image
        # working-directory: ./
        # run: |
        #   docker build -t danorlando/cleverchatai .

      # Build a Docker image for the NGINX reverse proxy
      # - name: Build NGINX Docker Image
      #   working-directory: ./nginx
      #   # Build image with tag rakeshpotnuru/productivity-app:nginx
      #   run: |
      #     docker build -t rakeshpotnuru/productivity-app:nginx-${{github.run_number}} -t rakeshpotnuru/productivity-app:nginx-latest .

      # Log in to Docker Hub using credentials from repository secrets
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Push the Docker images to Docker Hub
      - name: Build and Push Docker Images to Docker Hub
        uses: docker/build-push-action@v2
        with: 
          context: .
          file: Dockerfile
          push: true
          tags: danorlando/cleverchatai:latest
        # run: |
        #   docker push danorlando/cleverchatai
      - name: Get Timestamp
        uses: gerred/actions/current-time@master
        id: current-time

      - name: Run String Replace
        uses: frabert/replace-string-action@master
        id: format-time
        with:
          pattern: '[:\.]+'
          string: "${{ steps.current-time.outputs.time }}"
          replace-with: '-'
          flags: 'g'

      - name: Generate Deployment Package
        run: zip -r deploy.zip * -x "**node_modules**"

      - name: Deploy to EB
        uses: einaregilsson/beanstalk-deploy@v16
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: ${{ secrets.EB_APP_NAME }}
          environment_name: ${{ secrets.EB_ENV_NAME }}
          version_label: "docker-app-${{ steps.format-time.outputs.replaced }}"
          region: ${{ secrets.EB_REGION }}
          deployment_package: deploy.zip
      # This is the step that is deploying the application to Elastic Beanstalk.
      # - name: Deploy to Elastic Beanstalk
      #   uses: einaregilsson/beanstalk-deploy@v21
      #   with:
      #     aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     application_name: ${{ secrets.EB_APP_NAME }}
      #     environment_name: ${{ secrets.EB_ENV_NAME }}
      #     region: ${{ secrets.EB_REGION }}
      #     version_label: "version-${{ github.run_number }}"
      #     deployment_package: docker-compose.yml
